#!/bin/bash
# Deploys/Destroys remote AWS EC2 server

# Usage:
#   $ aws-deploy up
#   $ aws-deploy connect
#   $ aws-deploy down
#
# Required:
#   AWS credentials
#
################################################################################
# CONFIG
STACK_NAME=${VARIABLE:-kali-stack}
DEFAULT_KEYNAME=${VARIABLE:-id_rsa}
REMOTE_TEMPLATE=${VARIABLE:-"https://blue-steel.s3-eu-west-1.amazonaws.com/kali.yml"}
DEFAULT_PROFILE=${VARIABLE:-personal}
################################################################################
set -e

function start_server {
  if [[ -z $KEYNAME ]]; then # skip if set as an envionment variable
    read -p "Enter SSH KeyName [$DEFAULT_KEYNAME]: " keyname
    KEYNAME="${keyname:-$DEFAULT_KEYNAME}"
  fi

  read -p "Enter Template URL [$REMOTE_TEMPLATE]: " template
  [[ -n "$template" ]] && { export REMOTE_TEMPLATE="$template"; }

  echo

  echo "$ wget -nv $REMOTE_TEMPLATE -O /tmp/cf-template.yml"
  echo "$ aws --profile $AWS_PROFILE cloudformation deploy  --template /tmp/cf-template.yml --stack-name $STACK_NAME --parameter-overrides KeyName=$KEYNAME"
  read -sp "Press any key to execute" -n 1 -r
  echo
  wget -nv $REMOTE_TEMPLATE -O ./cf-template.yml
  aws --profile $AWS_PROFILE cloudformation deploy  --template ./cf-template.yml --stack-name $STACK_NAME --parameter-overrides KeyName=$KEYNAME
  rm /tmp/cf-template.yml
}


if [[ -z $PROFILE ]]; then # skip if set as an envionment variable
  read -p "Enter AWS Profile [$DEFAULT_PROFILE]: " profile
  AWS_PROFILE="${profile:-$DEFAULT_PROFILE}"
fi

case "$1" in
  up)
    start_server
    ;;

  down)
    echo
    echo "$ aws --profile $AWS_PROFILE cloudformation delete-stack --stack-name $STACK_NAME"
    read -sp "Press any key to execute" -n 1 -r
    echo
    echo
    if [[ $REPLY =~ ^[Nn]$ ]]
    then
      exit 0
    fi

    echo 'Attempting to delete stack...'
    aws --profile $AWS_PROFILE cloudformation delete-stack --stack-name $STACK_NAME
    aws --profile $AWS_PROFILE cloudformation wait stack-delete-complete --stack-name $STACK_NAME
    echo 'done' ;;

  status)
    echo 'Checking status...'
    # aws --profile $AWS_PROFILE cloudformation list-stacks 
    aws --profile $AWS_PROFILE cloudformation describe-stacks --stack-name $STACK_NAME | jq '.Stacks[0]'
    ;;

  connect)
    IDENTITY_FILE="~/.ssh/$DEFAULT_KEYNAME"
    read -p "Enter Identity File [$IDENTITY_FILE]: " identity_file
    [[ -n "$identity_file" ]] && { export IDENTITY_FILE="$identity_file"; }

    set -e
    echo "Fetching connection details..."
    RHOST=$(aws --profile $AWS_PROFILE cloudformation describe-stacks --stack-name $STACK_NAME | jq -r '.Stacks[0].Outputs[] | select(.OutputKey=="InstanceIPAddress") | .OutputValue')


    if [[ -n "$RHOST" ]]; then
      echo "ssh -i $IDENTITY_FILE ec2-user@$RHOST"
      read -sp "Press any key to execute" -n 1 -r
      echo

      echo "Attempting to connect..."
      ssh -i $IDENTITY_FILE ec2-user@$RHOST
    fi
    ;;
  *)
    echo "Error: Invalid argument"
    echo $"Usage: $ `basename $0` [up|down|status|connect]"
    exit 1

  esac
